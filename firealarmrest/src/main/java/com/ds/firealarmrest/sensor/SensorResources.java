package com.ds.firealarmrest.sensor;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/******  APIs *******/
@Path("sensor")
public class SensorResources {

    private SensorRepository repository = new SensorRepository();

    /***** API for get sensor details *****/
    @GET
    @Produces({MediaType.APPLICATION_JSON})
    public Response getSensors() {
        return repository.getSensors();
    }

    /***** API for get sensor details for a given Id *****/
    @GET
    @Path("{sensorId}")
    @Produces({MediaType.APPLICATION_JSON})
    public Response getSensor(@PathParam("sensorId") int id) {
        return repository.getSensor(id);
    }

    /***** API for create sensor details *****/
    @POST
    @Consumes({MediaType.APPLICATION_JSON})
    @Produces({MediaType.APPLICATION_JSON})
    public Response createSensor(Sensor s1) {
    	
        if (s1.getFloorNo() == null || s1.getRoomNo() == null)
            return Response.status(Response.Status.BAD_REQUEST).build();// print 400 response code for Bad Request error msg
        else
            return repository.create(s1);
    }

    /***** API for update smoke level and co2 level generated by sensor app  *****/
    @PUT
    @Path("by/{sensorId}")
    @Consumes({MediaType.APPLICATION_JSON})
    @Produces({MediaType.APPLICATION_JSON})
    public Response updateBySensor(@PathParam("sensorId") int id, Sensor s1) {
        return repository.updateBySensor(s1, id);
    }

    /***** API for update room number and floor number provided by Admin  *****/
    @PUT
    @Path("{sensorId}")
    @Consumes({MediaType.APPLICATION_JSON})
    @Produces({MediaType.APPLICATION_JSON})
    public Response updateSensor(@PathParam("sensorId") int id, Sensor s1) {
        Response response = repository.getSensor(id);
        if (s1.getFloorNo() == null || s1.getRoomNo() == null)
            return Response.status(Response.Status.BAD_REQUEST).build();
        else if (response.getStatus() == Response.Status.OK.getStatusCode())
            return repository.updateSensor(s1, id);
        else
            return response;
    }

    /***** API for delete sensor details of a selected sensor  *****/
    @DELETE
    @Path("{sensorId}")
    @Produces({MediaType.APPLICATION_JSON})
    public Response deleteSensor(@PathParam("sensorId") int id) {
        Response response = repository.getSensor(id);
        if (response.getStatus() == Response.Status.OK.getStatusCode())
            return repository.delete(id);
        else return response;
    }
}
